/* JaCoCo Plugin https://docs.gradle.org/current/userguide/jacoco_plugin.html */

apply plugin: 'jacoco'

ext {
    limits = [
        'instruction': 20,
        'branch'     : 18,
        'line'       : 18,
        'complexity' : 17,
        'method'     : 18,
        'class'      : 62 //TODO - 100%
    ]
}

jacocoTestReport {
    reports {
        xml { //XML required by coveralls and for the below coverage checks
            enabled true
            destination "${buildDir}/reports/coverage/coverageReport.xml"
        }
        html.destination "${buildDir}/reports/coverage"
    }

    doLast {
        def report = file(reports.xml.destination)
        logger.lifecycle("Checking coverage results: ${report}")

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(report)

        def percentage = {
            def covered = it.'@covered' as Double
            def missed = it.'@missed' as Double
            ((covered / (covered + missed)) * 100).round(2)
        }

        def failures = []
        [
            'instruction': percentage(results.counter.find { it.'@type'.equals('INSTRUCTION') }),
            'branch'     : percentage(results.counter.find { it.'@type'.equals('BRANCH') }),
            'line'       : percentage(results.counter.find { it.'@type'.equals('LINE') }),
            'complexity' : percentage(results.counter.find { it.'@type'.equals('COMPLEXITY') }),
            'method'     : percentage(results.counter.find { it.'@type'.equals('METHOD') }),
            'class'      : percentage(results.counter.find { it.'@type'.equals('CLASS') })
        ].each {
            if (it.value < limits[it.key])
                failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limits[it.key]}%")
        }

        if (failures) {
            logger.quiet("------------------ Code Coverage Failed -----------------------")
            failures.each { logger.quiet(it) }
            logger.quiet("---------------------------------------------------------------")
            throw new GradleException("Code coverage failed")
        } else
            logger.quiet("Passed Code Coverage Checks")
    }
}

check.dependsOn jacocoTestReport
