/* JaCoCo Plugin https://docs.gradle.org/current/userguide/jacoco_plugin.html */

apply plugin: 'jacoco'

ext {
    limits = [
        'instruction': 51,
        'branch'     : 42,
        'line'       : 57,
        'complexity' : 48,
        'method'     : 64,
        'class'      : 80, //TODO - 100%
    ]
}

jacocoTestReport {
    reports {
        xml { //XML required by coveralls and for the below coverage checks
            enabled true
            destination "${buildDir}/reports/coverage/coverageReport.xml"
        }
        html.destination "${buildDir}/reports/coverage"
    }

    doLast {
        def report = file(reports.xml.destination)
        logger.lifecycle("Checking coverage results: ${report}")

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(report)

        def filter_packages_list = ['com/eligible/model']
        def filtered_packages = results.package.findAll { !filter_packages_list.contains(it.'@name') }

        def percentage = { type ->
            def covered = 0.0
            def missed = 0.0
            filtered_packages.each {
                def fPkgCounter = it.counter.find { it.'@type'.equals(type) }
                if (fPkgCounter != null) {
                    covered += fPkgCounter.'@covered' as Double
                    missed += fPkgCounter.'@missed' as Double
                }
            }

            ((covered / (covered + missed)) * 100).round(2)
        }

        def failures = []
        [
            'instruction': percentage('INSTRUCTION'),
            'branch'     : percentage('BRANCH'),
            'line'       : percentage('LINE'),
            'complexity' : percentage('COMPLEXITY'),
            'method'     : percentage('METHOD'),
            'class'      : percentage('CLASS')
        ].each {
            if (it.value < limits[it.key])
                failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limits[it.key]}%")
        }

        if (failures) {
            logger.quiet("------------------ Code Coverage Failed -----------------------")
            failures.each { logger.quiet(it) }
            logger.quiet("---------------------------------------------------------------")
            throw new GradleException("Code coverage failed")
        } else
            logger.quiet("Passed Code Coverage Checks")
    }
}

check.dependsOn jacocoTestReport
